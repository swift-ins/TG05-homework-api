import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import requests
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")


THE_DOG_API_KEY = os.getenv('THE_DOG_API_KEY')




bot = Bot(token=TOKEN)
dp = Dispatcher()

def get_dog_breeds():
    url = "https://api.thedogapi.com/v1/breeds"
    headers = {"x-api-key": THE_DOG_API_KEY}
    response = requests.get(url, headers=headers)
    return response.json()

def get_dog_image_by_breed(breed_id):
    url = f"https://api.thedogapi.com/v1/images/search?breed_ids={breed_id}"
    headers = {"x-api-key": THE_DOG_API_KEY}
    response = requests.get(url, headers=headers)
    data = response.json()
    return data[0]['url']

def get_random_dog_image():
    url = "https://api.thedogapi.com/v1/images/search"
    headers = {"x-api-key": THE_DOG_API_KEY}
    response = requests.get(url, headers=headers)
    data = response.json()
    return data[0]['url']

def get_breed_info(breed_name):
    breeds = get_dog_breeds()
    for breed in breeds:
        if breed['name'].lower() == breed_name.lower():
            return breed
    return None

def get_top_breeds(limit=5):
    breeds = get_dog_breeds()
    return breeds[:limit]

def get_breeds_by_letter(letter: str):
    breeds = get_dog_breeds()
    return [breed['name'] for breed in breeds if breed['name'].upper().startswith(letter.upper())]

@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        "üê∂ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è —Å–æ–±–∞–∫!\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/by_letter - –Ω–∞–π—Ç–∏ –ø–æ—Ä–æ–¥—É –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ\n"
        "/random - —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏\n"
        "/list - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥\n\n"
        "/light_dogs - —Å–æ–±–∞–∫–∏ –≤–µ—Å–æ–º –¥–æ 5 –∫–≥\n"
        "/heavy_dogs - —Å–æ–±–∞–∫–∏ –≤–µ—Å–æ–º –±–æ–ª–µ–µ 80 –∫–≥\n"
        "–ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –±—É–∫–≤–µ!",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Command("random"))
async def random_dog(message: Message):
    dog_image_url = get_random_dog_image()
    await message.answer_photo(
        photo=dog_image_url, 
        caption="–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–µ—Å–∏–∫ –¥–ª—è —Ç–µ–±—è! üêï",
        reply_markup=ReplyKeyboardRemove()
    )
def get_breeds_by_max_weight(max_weight):
    breeds = get_dog_breeds()
    result = []
    for breed in breeds:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å –≤ –º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ (–∫–≥)
            weight_str = breed['weight']['metric']
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 - 4")
            if '-' in weight_str:
                min_weight, max_weight_range = map(float, weight_str.split('-'))
                if min_weight <= max_weight:
                    result.append(breed['name'])
            else:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞
                weight = float(weight_str)
                if weight <= max_weight:
                    result.append(breed['name'])
        except (KeyError, ValueError):
            continue
    return result

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–µ—Å—É
@dp.message(Command("light_dogs"))
async def light_dogs_command(message: Message):
    max_weight = 2  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∫–≥
    light_breeds = get_breeds_by_max_weight(max_weight)
    
    if light_breeds:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Ä–æ–¥–∞–º–∏
        keyboard_buttons = []
        for i in range(0, len(light_breeds), 3):
            row = light_breeds[i:i+3]
            keyboard_buttons.append([KeyboardButton(text=breed) for breed in row])
        
        keyboard_buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            f"üêï –ù–∞–π–¥–µ–Ω–æ {len(light_breeds)} –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫ –≤–µ—Å–æ–º –¥–æ {max_weight} –∫–≥:",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫ –≤–µ—Å–æ–º –¥–æ {max_weight} –∫–≥",
            reply_markup=ReplyKeyboardRemove()
        )
def get_breeds_by_min_weight(min_weight):
    breeds = get_dog_breeds()
    result = []
    for breed in breeds:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å –≤ –º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ (–∫–≥)
            weight_str = breed['weight']['metric']
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "70 - 90")
            if '-' in weight_str:
                min_w, max_w = map(float, weight_str.split('-'))
                if max_w >= min_weight:
                    result.append({
                        'name': breed['name'],
                        'weight': f"{min_w}-{max_w} –∫–≥"
                    })
            else:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞
                weight = float(weight_str)
                if weight >= min_weight:
                    result.append({
                        'name': breed['name'],
                        'weight': f"{weight} –∫–≥"
                    })
        except (KeyError, ValueError):
            continue
    return result

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—è–∂–µ–ª—ã—Ö —Å–æ–±–∞–∫
@dp.message(Command("heavy_dogs"))
async def heavy_dogs_command(message: Message):
    min_weight = 80  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –∫–≥
    heavy_breeds = get_breeds_by_min_weight(min_weight)
    
    if heavy_breeds:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Å–µ
        breeds_list = "\n".join(
            f"üêï‚Äçü¶∫ {breed['name']} ({breed['weight']})" 
            for breed in heavy_breeds
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
        keyboard_buttons = []
        for i in range(0, len(heavy_breeds), 2):
            row = heavy_breeds[i:i+2]
            keyboard_buttons.append(
                [KeyboardButton(text=breed['name']) for breed in row]
            )
        
        keyboard_buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        await message.answer(
            f"ü¶Æ –ö—Ä—É–ø–Ω—ã–µ –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫ (–≤–µ—Å–æ–º –±–æ–ª–µ–µ {min_weight} –∫–≥):\n\n{breeds_list}",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=keyboard_buttons,
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    else:
        await message.answer(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫ –≤–µ—Å–æ–º –±–æ–ª–µ–µ {min_weight} –∫–≥",
            reply_markup=ReplyKeyboardRemove()
        )


@dp.message(Command("by_letter"))
async def by_letter_command(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –ø–æ—Ä–æ–¥—ã —Å–æ–±–∞–∫–∏ (A-Z –∏–ª–∏ –ê-–Ø):",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(F.text.regexp(r'^[–∞-—è–ê-–Øa-zA-Z]$'))
async def show_breeds_by_letter(message: Message):
    letter = message.text.upper()
    breeds = get_breeds_by_letter(letter)
    
    if breeds:
        keyboard_buttons = []
        for i in range(0, len(breeds), 3):
            row = breeds[i:i+3]
            keyboard_buttons.append([KeyboardButton(text=breed) for breed in row])
        
        keyboard_buttons.append([KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_buttons,
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(breeds)} –ø–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {letter}:",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É {letter}",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_search(message: Message):
    await message.answer(
        "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Command("list"))
async def list_breeds(message: Message):
    breeds = get_dog_breeds()
    breed_names = [breed['name'] for breed in breeds]
    
    response = "üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫:\n\n" + "\n".join(breed_names)
    
    for i in range(0, len(response), 4000):
        await message.answer(
            response[i:i+4000],
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(F.text)
async def send_dog_info(message: Message):
    if message.text.startswith('/'):
        return
    
    breed_name = message.text
    breed_info = get_breed_info(breed_name)
    
    if breed_info:
        try:
            dog_image_url = get_dog_image_by_breed(breed_info['id'])
            info = (
                f"üêï <b>{breed_info['name']}</b>\n\n"
                f"üåç <i>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</i> {breed_info.get('origin', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚è≥ <i>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:</i> {breed_info.get('life_span', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚öñÔ∏è <i>–í–µ—Å:</i> {breed_info.get('weight', {}).get('metric', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} –∫–≥\n\n"
                f"üòä <i>–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç:</i> {breed_info.get('temperament', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )
            await message.answer_photo(
                photo=dog_image_url,
                caption=info,
                parse_mode="HTML",
                reply_markup=ReplyKeyboardRemove()
            )
        except Exception as e:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±–∞–∫–µ üò¢",
                reply_markup=ReplyKeyboardRemove()
            )
    else:
        await message.answer(
            "–ü–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /by_letter –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±—É–∫–≤–µ –∏–ª–∏ /list –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ—Ä–æ–¥.",
            reply_markup=ReplyKeyboardRemove()
        )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())